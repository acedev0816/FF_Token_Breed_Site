{"version":3,"sources":["candy-machine.ts","components/home/index.tsx","components/header/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","onSignature","result","context","e","error","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","puppyToken","puppyTokenAccount","remainAccounts","push","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","toString","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","remainingAccounts","ms","CounterText","styled","WalletDialogButton","MintButton","Button","TOKEN_SYMBOL","process","BONE_TOKEN","renderCounter","days","hours","minutes","seconds","completed","Home","props","useState","boneBalance","setBoneBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","setItemsAvailable","setItemsRedeemed","setItemsRemaining","open","message","severity","undefined","alertState","setAlertState","startDate","setStartDate","useAnchorWallet","setCandyMachine","candyMachineValid","setCandyMachineValid","fancyfrenchies","setFancyFrenchies","loading","setLoading","loadingBalance","setLoadingBalance","curFrenchy","setCurFrenchy","curBone","setCurBone","mutant","setMutant","refreshTokenItems","url_prefix","devnet","url","axios","get","resp","succcess","token_list","filter","tokenAmount","uiAmount","f_array","item","tokenAddress","tokenAccount","getMetaData","symbol","name","image","token_url","uri","refreshCandyMachineState","onMint","Keypair","generate","mintTxId","txTimeout","meta","msg","code","indexOf","refreshPuppyBalance","tokenMint","getTokenAccountBalance","balance","amount","Math","ceil","useEffect","Container","Grid","container","spacing","md","Typography","variant","className","xs","length","alt","src","CircularProgress","Select","label","onChange","event","target","MenuItem","map","index","Avatar","disabled","onClick","date","onMount","onComplete","renderer","Array","fill","Snackbar","autoHideDuration","onClose","Alert","ConnectButton","formatAddress","addr","substr","Header","AppBar","position","Toolbar","toBase58","Switch","checked","setDevNet","color","inputProps","startDateSeed","parseInt","theme","createTheme","palette","type","overrides","MuiButtonBase","root","justifyContent","MuiButton","textTransform","padding","startIcon","marginRight","endIcon","marginLeft","App","endpoint","setEndpoint","Connection","setConnection","WalletAdapterNetwork","Devnet","network","wallets","useMemo","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","Mainnet","rpcHost","clusterApiUrl","ThemeProvider","autoConnect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8328bf13.chunk.js","sourcesContent":["import * as anchor from \"@project-serum/anchor\";\r\n\r\nimport {\r\n  MintLayout,\r\n  TOKEN_PROGRAM_ID,\r\n  Token,\r\n} from \"@solana/spl-token\";\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  \"cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ\"\r\n);\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL\"\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  \"metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s\"\r\n);\r\n\r\nexport interface CandyMachine {\r\n  id: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection;\r\n  program: anchor.Program;\r\n}\r\n\r\ninterface CandyMachineState {\r\n  candyMachine: CandyMachine;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  goLiveDate: Date,\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  commitment: anchor.web3.Commitment = \"recent\",\r\n  queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log(\"Rejecting for timeout...\");\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result: any, context: any) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log(\"Rejected via websocket\", result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log(\"Resolved via websocket\", result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error(\"WS error in setup\", txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log(\"REST null result for\", txid, status);\r\n            } else if (status.err) {\r\n              console.log(\"REST error for\", txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log(\"REST no confirmations for\", txid, status);\r\n            } else {\r\n              console.log(\"REST confirmation for\", txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log(\"REST connection error: txid\", txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log(\"Returning status\", status);\r\n  return status;\r\n}\r\n\r\n/* export */ const createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineState> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: \"recent\",\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(\r\n    CANDY_MACHINE_PROGRAM,\r\n    provider\r\n  );\r\n\r\n  const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider);\r\n  const candyMachine = {\r\n    id: candyMachineId,\r\n    connection,\r\n    program,\r\n  }\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  console.log(\"state\", state);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  let goLiveDate = state.data.goLiveDate.toNumber();\r\n  goLiveDate = new Date(goLiveDate * 1000);\r\n\r\n  console.log({\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  })\r\n\r\n  return {\r\n    candyMachine,\r\n    itemsAvailable,\r\n    itemsRedeemed,\r\n    itemsRemaining,\r\n    goLiveDate,\r\n  };\r\n}\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from(\"edition\"),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from(\"metadata\"),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getTokenWallet = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  mint: anchor.web3.PublicKey\r\n) => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n      SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachine,\r\n  config: anchor.web3.PublicKey, // feels like this should be part of candyMachine?\r\n  payer: anchor.web3.PublicKey, //wallet address\r\n  treasury: anchor.web3.PublicKey,\r\n  puppyToken: anchor.web3.PublicKey,\r\n  mint: anchor.web3.Keypair  //mint address of new token\r\n): Promise<string> => {\r\n  //for custom token\r\n  const puppyTokenAccount = await getTokenWallet(payer, puppyToken);\r\n  const remainAccounts = [];\r\n  remainAccounts.push({ pubkey: puppyTokenAccount, isWritable: true, isSigner: false });\r\n  remainAccounts.push({ pubkey: payer, isWritable: false, isSigner: true });\r\n\r\n  //end: for custom token\r\n\r\n  const token = await getTokenWallet(payer, mint.publicKey);\r\n  const { connection, program } = candyMachine;\r\n  const metadata = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n  const rent = await connection.getMinimumBalanceForRentExemption(\r\n    MintLayout.span\r\n  );\r\n  //acer\r\n  console.log(\"anchor.web3\", anchor.web3, payer.toString());\r\n  console.log('mint', mint, mint.publicKey.toString()); //token mint address\r\n  console.log('token', token, token.toString()); //associated account\r\n  console.log('metadata', metadata, metadata.toString());\r\n  console.log('masterEdition', masterEdition, masterEdition.toString());//mint autority\r\n  console.log('rent', rent);\r\n  //configure instructions\r\n  let instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports: rent,\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      token,\r\n      payer,\r\n      payer,\r\n      mint.publicKey\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      token,\r\n      payer,\r\n      [],\r\n      1\r\n    ),\r\n  ];\r\n  return await program.rpc.mintNft({\r\n    accounts: {\r\n      config,\r\n      candyMachine: candyMachine.id,\r\n      payer: payer,\r\n      wallet: treasury,\r\n      mint: mint.publicKey,\r\n      metadata,\r\n      masterEdition,\r\n      mintAuthority: payer,\r\n      updateAuthority: payer,\r\n      tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n      tokenProgram: TOKEN_PROGRAM_ID,\r\n      systemProgram: anchor.web3.SystemProgram.programId,\r\n      rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n    },\r\n    signers: [mint],\r\n    remainingAccounts: remainAccounts,\r\n    instructions: instructions,\r\n  });\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise((resolve) => setTimeout(resolve, ms));\r\n}","import { AnchorHTMLAttributes, useCallback, useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Countdown from \"react-countdown\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  CircularProgress,\r\n  Container,\r\n  Grid,\r\n  MenuItem,\r\n  Select,\r\n  Snackbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\n\r\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\r\n\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\nimport \"./index.css\";\r\nimport {\r\n  CandyMachine,\r\n  awaitTransactionSignatureConfirmation,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n  shortenAddress,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from \"../../candy-machine\";\r\nimport axios from \"axios\";\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\n\r\nconst CounterText = styled.span``; // add your styles here\r\nconst MintButton = styled(Button)``; // add your styles here\r\n//load from env\r\nconst TOKEN_SYMBOL = process.env.REACT_APP_TOKEN_SYMBOL!;\r\nconst BONE_TOKEN = process.env.REACT_APP_BONE_TOKEN!;\r\n\r\n//home component\r\nexport interface HomeProps {\r\n  candyMachineId: anchor.web3.PublicKey;\r\n  config: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  startDate: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  txTimeout: number;\r\n  devnet: boolean;\r\n}\r\nconst Home = (props: HomeProps) => {\r\n  const [balance, setBalance] = useState<number>();\r\n  const [boneBalance, setBoneBalance] = useState<number>();\r\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\r\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\r\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\r\n\r\n  const [itemsAvailable, setItemsAvailable] = useState(0);\r\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\r\n  const [itemsRemaining, setItemsRemaining] = useState(0);\r\n\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: \"\",\r\n    severity: undefined,\r\n  });\r\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\r\n  const wallet = useAnchorWallet();\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\r\n  //acer\r\n  const [candyMachineValid, setCandyMachineValid] = useState<boolean>(true);\r\n  const [fancyfrenchies, setFancyFrenchies] = useState<Array<any>>([]);\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  const [loadingBalance, setLoadingBalance] = useState<boolean>(false);\r\n  const [curFrenchy, setCurFrenchy] = useState<number>(-1);\r\n  const [curBone, setCurBone] = useState<number>(-1);\r\n  const [mutant, setMutant] = useState<any>(null); //metadata of breed nft\r\n\r\n  const refreshTokenItems = async () => {\r\n    console.log(\"refreshTokenItems start\");\r\n    if (!wallet) return;\r\n\r\n    let url_prefix = \"https://api.solscan.io\";\r\n    if (props.devnet) url_prefix = \"https://api-devnet.solscan.io\";\r\n    let url = `${url_prefix}/account/tokens?address=${wallet.publicKey.toString()}`;\r\n    console.log(\"refreshTokenItems\", url);\r\n    let resp = await axios.get(url);\r\n\r\n    if (!resp.data.succcess) {\r\n      return;\r\n    }\r\n    let token_list = resp.data.data;\r\n    token_list = token_list.filter(\r\n      (data: { tokenAmount: { uiAmount: number } }) =>\r\n        data.tokenAmount.uiAmount !== 0\r\n    );\r\n    let f_array = [];\r\n    //get token information\r\n    for (const item of token_list) {\r\n      const { tokenAddress, tokenAccount } = item;\r\n      const metadata = await getMetaData(tokenAddress);\r\n      if (metadata) {\r\n        const symbol = metadata.symbol;\r\n        if (symbol === TOKEN_SYMBOL) {\r\n          f_array.push({\r\n            tokenAddress,\r\n            tokenAccount,\r\n            name: metadata.name,\r\n            image: metadata.image,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    //update state\r\n    console.log(\"refreshTokenItems\", f_array);\r\n    setFancyFrenchies(f_array);\r\n    setCurFrenchy(-1);\r\n    setLoading(false);\r\n  };\r\n\r\n  //get metadata for one token\r\n  const getMetaData = async (\r\n    token: anchor.web3.PublicKey,\r\n    filter: boolean = true\r\n  ) => {\r\n    let url_prefix = \"https://api.solscan.io\";\r\n    if (props.devnet) url_prefix = \"https://api-devnet.solscan.io\";\r\n\r\n    let token_url = `${url_prefix}/account?address=${token.toString()}`;\r\n    let resp = await axios.get(token_url);\r\n    if (!resp.data.succcess) return null;\r\n    try {\r\n      const symbol = resp.data.data.metadata.data.symbol;\r\n      if (!filter || symbol === TOKEN_SYMBOL) {\r\n        const uri = resp.data.data.metadata.data.uri;\r\n        resp = await axios.get(uri);\r\n        return resp.data;\r\n      }\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const handleFFChange = (event: any) => {\r\n    setCurFrenchy(event.target.value);\r\n    setMutant(null);\r\n  };\r\n  const handleBoneChange = (event: any) => {\r\n    setCurBone(event.target.value);\r\n    setMutant(null);\r\n  };\r\n  const refreshCandyMachineState = () => {\r\n    (async () => {\r\n      if (!wallet || !props.connection) return;\r\n\r\n      try {\r\n        const {\r\n          candyMachine,\r\n          goLiveDate,\r\n          itemsAvailable,\r\n          itemsRemaining,\r\n          itemsRedeemed,\r\n        } = await getCandyMachineState(\r\n          wallet as anchor.Wallet,\r\n          props.candyMachineId,\r\n          props.connection\r\n        );\r\n\r\n        setItemsAvailable(itemsAvailable);\r\n        setItemsRemaining(itemsRemaining);\r\n        setItemsRedeemed(itemsRedeemed);\r\n\r\n        setIsSoldOut(itemsRemaining === 0);\r\n        setStartDate(goLiveDate);\r\n        setCandyMachine(candyMachine);\r\n\r\n        setCandyMachineValid(true);\r\n      } catch (error) {\r\n        setCandyMachineValid(false);\r\n      }\r\n    })();\r\n  };\r\n\r\n  const onMint = async () => {\r\n    const mint = anchor.web3.Keypair.generate();\r\n    try {\r\n      setIsMinting(true);\r\n      let puppyToken = new anchor.web3.PublicKey(BONE_TOKEN);\r\n\r\n      if (wallet && candyMachine?.program) {\r\n        console.log(\"before mint one token\");\r\n        const mintTxId = await mintOneToken(\r\n          candyMachine,\r\n          props.config,\r\n          wallet.publicKey,\r\n          props.treasury,\r\n          puppyToken,\r\n          mint\r\n        );\r\n        console.log(\"after mint one token\");\r\n\r\n        const status = await awaitTransactionSignatureConfirmation(\r\n          mintTxId,\r\n          props.txTimeout,\r\n          props.connection,\r\n          \"singleGossip\",\r\n          false\r\n        );\r\n\r\n        if (!status?.err) {\r\n          //update mutant image\r\n          const meta = await getMetaData(mint.publicKey, false);\r\n          console.log(\"mutant\", meta);\r\n          setMutant(meta);\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Congratulations! Breed succeeded!\",\r\n            severity: \"success\",\r\n          });\r\n          //refresh token\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: \"Breed failed! Please try again!\",\r\n            severity: \"error\",\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      // TODO: blech:\r\n      let message = error.msg || \"Breed failed! Please try again!\";\r\n      console.log(\"error\", error);\r\n      if (!error.msg) {\r\n        if (error.message.indexOf(\"0x138\")) {\r\n        } else if (error.message.indexOf(\"0x137\")) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf(\"0x135\")) {\r\n          message = `Insufficient funds to breed. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          setIsSoldOut(true);\r\n        } else if (error.code === 312) {\r\n          message = `Breed period hasn't started yet.`;\r\n        }\r\n      }\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: \"error\",\r\n      });\r\n    } finally {\r\n      setIsMinting(false);\r\n      refreshCandyMachineState();\r\n      refreshPuppyBalance();\r\n    }\r\n  };\r\n  const refreshPuppyBalance = async () => {\r\n    if (wallet) {\r\n      try {\r\n        setLoadingBalance(true);\r\n        let tokenMint = new anchor.web3.PublicKey(BONE_TOKEN);\r\n        let tokenAccount: anchor.web3.PublicKey = (\r\n          await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n              wallet.publicKey.toBuffer(),\r\n              TOKEN_PROGRAM_ID.toBuffer(),\r\n              tokenMint.toBuffer(),\r\n            ],\r\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n          )\r\n        )[0];\r\n        let balance = await props.connection.getTokenAccountBalance(\r\n          tokenAccount\r\n        );\r\n        console.log(\"puppy balance\", balance);\r\n        let amount: number = balance.value.uiAmount!;\r\n        amount = Math.ceil(amount);\r\n        setBoneBalance(amount);\r\n      } catch (e) {\r\n        setBoneBalance(0);\r\n      }\r\n      setLoadingBalance(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (wallet) {\r\n        //set loading state\r\n        setLoading(true);\r\n        //get balance\r\n        //const balance = await props.connection.getBalance(wallet.publicKey);\r\n        //setBalance(balance / LAMPORTS_PER_SOL);\r\n        //init values\r\n        setCurFrenchy(-1);\r\n        //get token list\r\n        refreshTokenItems();\r\n        //refresh puppy token balance\r\n        refreshPuppyBalance();\r\n      }\r\n    })();\r\n  }, [wallet, props.connection, props.devnet]);\r\n\r\n  useEffect(refreshCandyMachineState, [\r\n    wallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    props.devnet,\r\n  ]);\r\n\r\n  return (\r\n    <main>\r\n      {/* {wallet && (\r\n        <p>Wallet {shortenAddress(wallet.publicKey.toBase58() || \"\")}</p>\r\n      )}\r\n      {wallet && <p>Total Available: {itemsAvailable}</p>}\r\n      {wallet && <p>Redeemed: {itemsRedeemed}</p>}\r\n      {wallet && <p>Remaining: {itemsRemaining}</p>} */}\r\n      <Container>\r\n        <Grid container spacing={1}>\r\n          <Grid item md={12}>\r\n            <Typography\r\n              variant=\"h4\"\r\n              className={candyMachineValid ? \"title\" : \"title red\"}\r\n            >\r\n              {candyMachineValid ? \"\" : \"CANDY MACHINE IS NOT VALID\"}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid container item md={12} spacing={3}>\r\n            <Grid item md={4} xs={12} className=\"row\">\r\n              <Typography variant=\"h5\" className=\"subtitle\">\r\n                Fancy Frenchies{\" \"}\r\n                {wallet && !loading && `(${fancyfrenchies.length})`}\r\n              </Typography>\r\n              <div className=\"card\">\r\n                <img\r\n                  alt=\"ff back\"\r\n                  src=\"img/ff_back.png\"\r\n                  className=\"card-back\"\r\n                />\r\n                <img\r\n                  alt=\"Fancy Frenchy\"\r\n                  src={\r\n                    curFrenchy === -1\r\n                      ? \"img/ff.png\"\r\n                      : fancyfrenchies[curFrenchy].image\r\n                  }\r\n                  className=\"card-image\"\r\n                />\r\n                <Typography variant=\"h6\" className=\"connect-wallet black\">\r\n                {wallet\r\n                  ? \"Select a fancy frenchy\"\r\n                  : \"Connect wallet and select\"}\r\n              </Typography>\r\n              {loading ? (\r\n                <CircularProgress />\r\n              ) : (\r\n                wallet && (\r\n                  <Select\r\n                    label=\"Age\"\r\n                    className=\"item-select\"\r\n                    onChange={handleFFChange}\r\n                    value={curFrenchy}\r\n                  >\r\n                    <MenuItem value={-1}> Not selected</MenuItem>\r\n                    {fancyfrenchies.map((item, index) => (\r\n                      <MenuItem value={index} key={index} className=\"menu-item\">\r\n                        <Avatar src={item.image} />\r\n                        {item.name}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </Select>\r\n                )\r\n              )}\r\n              </div>\r\n\r\n              \r\n            </Grid>\r\n            <Grid item md={4} xs={12} className=\"row\">\r\n              <Typography variant=\"h5\" className=\"subtitle\">\r\n                Breeding Chamber\r\n              </Typography>\r\n              <div className=\"card\">\r\n                <img\r\n                  alt=\"mutant back\"\r\n                  src=\"img/mutant_back.png\"\r\n                  className=\"card-back\"\r\n                />\r\n                <img\r\n                  alt=\"Mutant\"\r\n                  src={\r\n                    !mutant \r\n                      ? \"img/mutant.png\"\r\n                      : mutant.image\r\n                  }\r\n                  className=\"card-image\"\r\n                />\r\n                {/* {mutant && <Typography variant=\"h6\">{mutant.name}</Typography>} */}\r\n                <MintButton\r\n                  disabled={\r\n                    isSoldOut ||\r\n                    isMinting ||\r\n                    !isActive ||\r\n                    curFrenchy === -1 ||\r\n                    curBone === -1 ||\r\n                    !candyMachineValid\r\n                  }\r\n                  onClick={onMint}\r\n                  className=\"mint-button\"\r\n                >\r\n                  {isSoldOut ? (\r\n                    \"Breed Period Finished\"\r\n                  ) : isActive ? (\r\n                    isMinting ? (\r\n                      <CircularProgress />\r\n                    ) : (\r\n                      \"Mint Baby\"\r\n                    )\r\n                  ) : (\r\n                    <Countdown\r\n                      date={startDate}\r\n                      onMount={({ completed }) => completed && setIsActive(true)}\r\n                      onComplete={() => setIsActive(true)}\r\n                      renderer={renderCounter}\r\n                    />\r\n                  )}\r\n                </MintButton>\r\n              </div>\r\n            </Grid>\r\n            <Grid item md={4} xs={12} className=\"row\">\r\n              <Typography variant=\"h5\" className=\"subtitle\">\r\n                Bones{\" \"}\r\n                {boneBalance !== undefined && !loadingBalance\r\n                  ? `(${boneBalance})`\r\n                  : \"\"}\r\n              </Typography>\r\n              <div className=\"card\">\r\n                <img\r\n                  alt=\"bone back\"\r\n                  src=\"img/bone_back.png\"\r\n                  className=\"card-back\"\r\n                />\r\n                <img\r\n                  alt=\"bone\"\r\n                  src={\r\n                    curBone === -1\r\n                      ? \"img/bone_ano.png\"\r\n                      : \"img/bone.png\"\r\n                  }\r\n                  className=\"card-image\"\r\n                />\r\n                <Typography variant=\"h6\" className=\"connect-wallet black\">\r\n                  {wallet ? \"Select a bone\" : \"Connect wallet and select\"}\r\n                </Typography>\r\n                {loadingBalance ? (\r\n                  <CircularProgress />\r\n                ) : (\r\n                  wallet && (\r\n                    <Select\r\n                      label=\"Age\"\r\n                      className=\"item-select\"\r\n                      onChange={handleBoneChange}\r\n                      value={curBone}\r\n                    >\r\n                      <MenuItem value={-1}> Not selected</MenuItem>\r\n                      {new Array(boneBalance!).fill(\"4\").map((item, index) => (\r\n                        <MenuItem value={index} key={index} className=\"menu-item\">\r\n                          <Avatar src=\"img/bone.png\" />\r\n                          Bone\r\n                        </MenuItem>\r\n                      ))}\r\n                    </Select>\r\n                  )\r\n                )}\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </main>\r\n  );\r\n};\r\n\r\ninterface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\r\n}\r\n\r\nconst renderCounter = ({ days, hours, minutes, seconds, completed }: any) => {\r\n  return (\r\n    <CounterText>\r\n      {hours + (days || 0) * 24} hours, {minutes} minutes, {seconds} seconds\r\n    </CounterText>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { useEffect, useState } from \"react\";\r\nimport Countdown from \"react-countdown\";\r\nimport styled from \"styled-components\";\r\n\r\nimport {\r\n  AppBar,\r\n  Avatar,\r\n  Switch,\r\n  Toolbar,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\r\nimport \"./index.css\";\r\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\r\n\r\nconst ConnectButton = styled(WalletDialogButton)``;\r\nconst formatAddress = (addr:string) => { \r\n  const length = addr.length;\r\n  return addr.substr(0,4) + \"..\" + addr.substr(length-4);\r\n\r\n}\r\nconst Header = (props: {setDevNet:(devent:boolean) => void, devnet:boolean}) => {\r\n  const wallet = useAnchorWallet();\r\n  \r\n  const handleChange = (event:any) => {\r\n    props.setDevNet(event.target.checked);\r\n  }\r\n  return (\r\n    <AppBar position=\"fixed\" className=\"appbar\">\r\n      <Toolbar>\r\n        <div className=\"appbar-title\">\r\n        </div>\r\n        <ConnectButton>{wallet && formatAddress(wallet.publicKey.toBase58()) || \"Connect\"}</ConnectButton>\r\n        <div className=\"net-select\">\r\n          <Switch\r\n            checked={props.devnet}\r\n            onChange={handleChange}\r\n            color=\"primary\"\r\n            disabled={!wallet}\r\n            inputProps={{ 'aria-label': 'primary checkbox' }}\r\n          />\r\n          <Typography> {props.devnet? \"DevNet\" : \"MainNet\"}</Typography>\r\n        </div>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\nexport default Header;\r\n","import \"./App.css\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\n\r\nimport Home from \"./components/home\";\r\nimport Header from \"./components/header\";\r\n\r\nimport * as anchor from \"@project-serum/anchor\";\r\nimport { clusterApiUrl } from \"@solana/web3.js\";\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from \"@solana/wallet-adapter-wallets\";\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from \"@solana/wallet-adapter-react\";\r\n\r\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\r\nimport {\r\n  Avatar,\r\n  createTheme,\r\n  ThemeProvider,\r\n  Typography,\r\n  Toolbar,\r\n} from \"@material-ui/core\";\r\nimport { AppBar, Box, Button } from \"@material-ui/core\";\r\nconst treasury = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_TREASURY_ADDRESS!\r\n);\r\n\r\n\r\nconst config = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\r\n);\r\n\r\nconst candyMachineId = new anchor.web3.PublicKey(\r\n  process.env.REACT_APP_CANDY_MACHINE_ID!\r\n);\r\n\r\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\r\n\r\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n  },\r\n  overrides: {\r\n    MuiButtonBase: {\r\n      root: {\r\n        justifyContent: \"flex-start\",\r\n      },\r\n    },\r\n    MuiButton: {\r\n      root: {\r\n        textTransform: undefined,\r\n        padding: \"12px 16px\",\r\n      },\r\n      startIcon: {\r\n        marginRight: 8,\r\n      },\r\n      endIcon: {\r\n        marginLeft: 8,\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst App = () => {\r\n  const [endpoint,setEndpoint] = useState<string>(\"https://api.devnet.solana.com\");\r\n  const [connection, setConnection] = useState<anchor.web3.Connection >(new anchor.web3.Connection(\"https://explorer-api.devnet.solana.com\"));\r\n  const [network, setNetwork] = useState<WalletAdapterNetwork>(WalletAdapterNetwork.Devnet);\r\n  const [devnet, setDevNet] = useState<boolean>(true);\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSlopeWallet(),\r\n      getSolflareWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    const network = devnet\r\n      ? WalletAdapterNetwork.Devnet\r\n      : WalletAdapterNetwork.Mainnet;\r\n    const rpcHost = devnet\r\n      ? \"https://explorer-api.devnet.solana.com\"\r\n      : \"https://explorer-api.mainnet-beta.solana.com\";\r\n    setConnection (new anchor.web3.Connection(rpcHost) );\r\n    const endpoint = clusterApiUrl(network);\r\n    setEndpoint (endpoint);\r\n    console.log('endpoint', endpoint);\r\n\r\n  }, [devnet]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect={true}>\r\n          <WalletDialogProvider>\r\n            <>\r\n              <Header setDevNet={setDevNet} devnet={devnet} />\r\n              <Home\r\n                candyMachineId={candyMachineId}\r\n                config={config}\r\n                connection={connection}\r\n                startDate={startDateSeed}\r\n                treasury={treasury}\r\n                txTimeout={txTimeout}\r\n                devnet={devnet}\r\n              />\r\n            </>\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}